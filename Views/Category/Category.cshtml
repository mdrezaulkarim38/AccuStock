@model IEnumerable<AccuStock.Models.Category>
@{
    ViewData["Title"] = "Category";
}

<div class="row">
    <div class="col-md-12">
        <div class="card shadow">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">Category List</h5>
                <button class="btn btn-primary btn-sm" id="addNewCategory" data-bs-toggle="modal" data-bs-target="#categoryModal">
                    <i class="fas fa-plus"></i> Add New
                </button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table datanew">
                        <thead class="table-primary">
                            <tr>
                                <th>SL No.</th>
                                <th>Name</th>
                                <th>Parent Category</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int index = 0;
                            }
                            @foreach (var category in Model)
                            {
                                index++;
                                <tr>
                                    <td>@index</td>
                                    <td>@category.Name</td>
                                    <td>@category.ParentCategory?.Name</td>
                                    <td class="d-flex gap-2">
                                        <button class="btn btn-warning btn-sm"
                                                onclick="editCategory('@category.Id', '@category.Name', '@category.ParentCategoryId', @(category.ParentCategoryId == null ? "true" : "false"))"
                                                data-bs-toggle="modal" data-bs-target="#categoryModal">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <form asp-action="DeleteCat" method="post">
                                            <input type="hidden" name="id" value="@category.Id" />
                                            <button type="submit" class="btn btn-danger btn-sm">
                                                <i class="fas fa-trash-alt"></i> Delete
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Add/Edit Category -->
<div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="categoryModalLabel">Add Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="CreateOrUpdateCat" method="post" id="categoryForm">
                    <input type="hidden" id="CategoryId" name="Id" />

                    <div class="mb-3">
                        <label for="Name" class="form-label">Category Name</label>
                        <input type="text" class="form-control" id="Name" name="Name" required />
                    </div>

                    <div class="mb-3" id="parentCategorySection">
                        <label for="ParentCategoryId" class="form-label">Parent Category</label>
                        <div class="input-group">
                            <select class="form-select" id="ParentCategoryId" name="ParentCategoryId">
                                <option value="">-- Select --</option>
                                @foreach (var parent in Model.Where(c => c.ParentCategoryId == null))
                                {
                                    <option value="@parent.Id" data-name="@parent.Name">@parent.Name</option>
                                }
                            </select>
                            <button type="button" class="btn btn-warning btn-sm" id="editParentButton" disabled
                                    onclick="editSelectedParentCategory()" data-bs-toggle="modal" data-bs-target="#parentCategoryModal">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#parentCategoryModal" onclick="openParentModal()">Add New Parent</button>
                    </div>

                    <div class="d-flex justify-content-start gap-2">
                        <button type="submit" class="btn btn-success btn-sm">
                            <i class="bi bi-check-circle"></i> <span id="modalSubmitText">Submit</span>
                        </button>
                        <button type="reset" class="btn btn-secondary btn-sm">
                            <i class="bi bi-arrow-clockwise"></i> Reset
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Add/Edit Parent Category -->
<div class="modal fade" id="parentCategoryModal" tabindex="-1" aria-labelledby="parentCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="parentCategoryModalLabel">Add Parent Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="parentCategoryForm" asp-action="CreateOrUpdateCat" method="post">
                    <input type="hidden" id="ParentCategoryIdInput" name="Id" />
                    <div class="mb-3">
                        <label for="ParentName" class="form-label">Parent Category Name</label>
                        <input type="text" class="form-control" id="ParentName" name="Name" required />
                    </div>
                    <input type="hidden" name="ParentCategoryId" value="" />
                    <div class="d-flex justify-content-start gap-2">
                        <button type="submit" class="btn btn-success btn-sm">
                            <i class="bi bi-check-circle"></i> <span id="parentModalSubmitText">Save</span>
                        </button>
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal" onclick="reopenCategoryModal()">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let isTransitioningToParentModal = false;
        let categoryModalState = {};

        function resetCategoryModal() {
            document.getElementById("CategoryId").value = "";
            document.getElementById("Name").value = "";
            document.getElementById("ParentCategoryId").value = "";
            document.getElementById("categoryModalLabel").textContent = "Add Category";
            document.getElementById("modalSubmitText").textContent = "Submit";
            document.getElementById("parentCategorySection").style.display = "block";
            document.getElementById("editParentButton").disabled = true;
            categoryModalState = {}; // Clear stored state
        }

        function saveCategoryModalState() {
            categoryModalState = {
                CategoryId: document.getElementById("CategoryId").value,
                Name: document.getElementById("Name").value,
                ParentCategoryId: document.getElementById("ParentCategoryId").value,
                ModalLabel: document.getElementById("categoryModalLabel").textContent,
                SubmitText: document.getElementById("modalSubmitText").textContent,
                ParentSectionDisplay: document.getElementById("parentCategorySection").style.display
            };
            console.log("Saved category modal state:", categoryModalState);
        }

        function restoreCategoryModalState() {
            if (Object.keys(categoryModalState).length > 0) {
                document.getElementById("CategoryId").value = categoryModalState.CategoryId || "";
                document.getElementById("Name").value = categoryModalState.Name || "";
                document.getElementById("ParentCategoryId").value = categoryModalState.ParentCategoryId || "";
                document.getElementById("categoryModalLabel").textContent = categoryModalState.ModalLabel || "Add Category";
                document.getElementById("modalSubmitText").textContent = categoryModalState.SubmitText || "Submit";
                document.getElementById("parentCategorySection").style.display = categoryModalState.ParentSectionDisplay || "block";
                document.getElementById("editParentButton").disabled = !categoryModalState.ParentCategoryId;
                console.log("Restored category modal state:", categoryModalState);
            }
        }

        function resetParentModal() {
            document.getElementById("ParentCategoryIdInput").value = "";
            document.getElementById("ParentName").value = "";
            document.getElementById("parentCategoryModalLabel").textContent = "Add Parent Category";
            document.getElementById("parentModalSubmitText").textContent = "Save";
        }

        function openParentModal() {
            saveCategoryModalState();
            isTransitioningToParentModal = true;
            resetParentModal();
            $('#categoryModal').modal('hide');
            $('#parentCategoryModal').modal('show');
        }

        function reopenCategoryModal() {
            $('#parentCategoryModal').modal('hide');
            $('#categoryModal').modal('show');
        }

        function editCategory(id, name, parentId, isParent) {
            try {
                console.log("Editing category:", { id, name, parentId, isParent });
                document.getElementById("CategoryId").value = id;
                document.getElementById("Name").value = name;
                document.getElementById("ParentCategoryId").value = parentId || "";
                document.getElementById("categoryModalLabel").textContent = isParent ? "Edit Parent Category" : "Edit Category";
                document.getElementById("modalSubmitText").textContent = "Update";
                document.getElementById("parentCategorySection").style.display = isParent ? "none" : "block";
                document.getElementById("editParentButton").disabled = !document.getElementById("ParentCategoryId").value;
                $('#categoryModal').modal('show');
            } catch (error) {
                console.error("Error in editCategory:", error);
                alert("An error occurred while preparing the edit form.");
            }
        }

        function editSelectedParentCategory() {
            try {
                var select = document.getElementById("ParentCategoryId");
                var selectedOption = select.options[select.selectedIndex];
                if (selectedOption && selectedOption.value) {
                    console.log("Editing selected parent:", { value: selectedOption.value, name: selectedOption.getAttribute("data-name") });
                    saveCategoryModalState();
                    isTransitioningToParentModal = true;
                    document.getElementById("ParentCategoryIdInput").value = selectedOption.value;
                    document.getElementById("ParentName").value = selectedOption.getAttribute("data-name");
                    document.getElementById("parentCategoryModalLabel").textContent = "Edit Parent Category";
                    document.getElementById("parentModalSubmitText").textContent = "Update";
                    $('#categoryModal').modal('hide');
                    $('#parentCategoryModal').modal('show');
                } else {
                    console.warn("No parent category selected for editing.");
                    alert("Please select a parent category to edit.");
                }
            } catch (error) {
                console.error("Error in editSelectedParentCategory:", error);
                alert("An error occurred while trying to edit the parent category.");
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            var categoryModal = document.getElementById("categoryModal");
            categoryModal.addEventListener("hidden.bs.modal", function () {
                if (!isTransitioningToParentModal) {
                    resetCategoryModal();
                }
                isTransitioningToParentModal = false; // Reset flag after handling
            });

            var parentCategoryModal = document.getElementById("parentCategoryModal");
            parentCategoryModal.addEventListener("hidden.bs.modal", function () {
                resetParentModal();
                restoreCategoryModalState();
                $('#categoryModal').modal('show');
            });

            // Enable/disable edit button based on dropdown selection
            document.getElementById("ParentCategoryId").addEventListener("change", function () {
                document.getElementById("editParentButton").disabled = !this.value;
            });

            // Handle parent category form submission
            document.getElementById("parentCategoryForm").addEventListener("submit", function (e) {
                e.preventDefault();
                var form = this;
                var formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log("Parent category updated:", data);
                        $('#parentCategoryModal').modal('hide');
                        var select = document.getElementById("ParentCategoryId");
                        let option = Array.from(select.options).find(opt => opt.value === data.categoryId);
                        if (option) {
                            option.text = data.categoryName;
                            option.setAttribute("data-name", data.categoryName);
                        } else {
                            var newOption = document.createElement("option");
                            newOption.value = data.categoryId;
                            newOption.text = data.categoryName;
                            newOption.setAttribute("data-name", data.categoryName);
                            select.appendChild(newOption);
                        }
                        select.value = data.categoryId;
                        restoreCategoryModalState();
                        $('#categoryModal').modal('show');
                    } else {
                        console.error("Error updating parent category:", data.message);
                        alert("Error updating parent category: " + (data.message || "Unknown error"));
                    }
                })
                .catch(error => {
                    console.error("Error in parent category submission:", error);
                    alert("An error occurred while updating the parent category.");
                });
            });

            // Handle category form submission
            document.getElementById("categoryForm").addEventListener("submit", function (e) {
                e.preventDefault();
                var form = this;
                var formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log("Category updated:", data);
                        $('#categoryModal').modal('hide');
                        if (document.getElementById("parentCategorySection").style.display === "none") {
                            var select = document.getElementById("ParentCategoryId");
                            Array.from(select.options).forEach(option => {
                                if (option.value === data.categoryId) {
                                    option.text = data.categoryName;
                                    option.setAttribute("data-name", data.categoryName);
                                }
                            });
                        }
                        location.reload();
                    } else {
                        console.error("Error updating category:", data.message);
                        alert("Error: " + (data.message || "Unknown error"));
                    }
                })
                .catch(error => {
                    console.error("Error in category submission:", error);
                    alert("An error occurred while updating the category.");
                });
            });
        });
    </script>
}