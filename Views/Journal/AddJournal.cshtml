@{
    ViewData["Title"] = "New Journal";
}

<div class="row">
    <div class="col-md-12">
        <div class="card shadow">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">New Journal</h5>
            </div>
            <div class="card-body">
                <form id="journalForm" method="post">
                    <table class="table">
                        <tbody>
                        <tr>
                            <td>
                                <strong>Date:</strong>
                            </td>
                            <td>
                                <input type="date" id="VchDate" name="VchDate" class="form-control"
                                       value="@DateTime.Now.ToString("yyyy-MM-dd")"/>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <strong>Reference:</strong>
                            </td>
                            <td>
                                <input type="text" id="RefNo" name="RefNo" class="form-control"
                                       placeholder="Enter Reference No"/>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <strong>Notes:</strong>
                            </td>
                            <td>
                                <input type="text" id="Notes" name="Notes" class="form-control"
                                       placeholder="Enter Notes"/>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <strong>Journal Type:</strong>
                            </td>
                            <td>
                                <select id="JournalType" class="form-select" name="JournalType">
                                    <option value="" selected>Select Journal Type</option>
                                    <option value="1">CV</option>
                                    <option value="2">JV</option>
                                </select>
                            </td>
                        </tr>
                        </tbody>
                    </table>

                    <table class="table table-bordered table-striped mt-5" id="journalTable">
                        <thead style="background:#fafafa;">
                        <tr>
                            <th>Head Of Account</th>
                            <th>Description</th>
                            <th>Debit</th>
                            <th>Credit</th>
                            <th>Action</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr class="rowTemplate">
                            <td>
                                <select name="HeadOfAccount" class="form-control headOfAccountDropdown">
                                    <option value="">Select Chart of Account</option>
                                </select>
                            </td>
                            <td>
                                <input type="text" name="Description" class="form-control"/>
                            </td>
                            <td>
                                <input type="text" name="Debit" class="form-control"/>
                            </td>
                            <td>
                                <input type="text" name="Credit" class="form-control"/>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm removeRow">X</button>
                            </td>
                        </tr>
                        </tbody>
                        <tfoot>
                        <tr>
                            <td colspan="5">
                                <button type="button" class="btn btn-success btn-sm" id="addNewRow">Add New Row</button>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="4" class="text-end">
                                <strong>Total:</strong>
                            </td>
                            <td>
                                <span>0.00</span>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="4" class="text-end">
                                <strong>Difference:</strong>
                            </td>
                            <td>
                                <span>0.00</span>
                            </td>
                        </tr>
                        </tfoot>
                    </table>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary btn-sm">Submit</button>
                        <a href="@Url.Action("JournalList", "Journal")" class="btn btn-secondary btn-sm">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .table> :not(:first-child) {
        border-top: none !important;
    }
</style>

@section Scripts {
    <script>
        let isDropdownPopulated = false;

document.addEventListener("DOMContentLoaded", function () {
    ensureMinimumRows();
    loadHeadOfAccountDropdown();
});

function ensureMinimumRows() {
    let tableBody = document.querySelector("#journalTable tbody");
    while (tableBody.children.length < 2) {
        addNewJournalRow();
    }
    updateRemoveButtons();
}

function updateRemoveButtons() {
    let rows = document.querySelectorAll("#journalTable tbody tr");
    rows.forEach((row, index) => {
        let removeButton = row.querySelector(".removeRow");
        removeButton.disabled = rows.length <= 2; // Disable if 2 or fewer rows
        removeButton.classList.toggle("disabled", rows.length <= 2);
    });
}

function loadHeadOfAccountDropdown() {
    if (isDropdownPopulated) return;

    $.ajax({
        url: '@Url.Action("GetHeadOfAccounts", "ChartOfAccount")',
        type: 'GET',
        success: function (data) {
            const selectElements = document.querySelectorAll('.headOfAccountDropdown');
            const groupedAccounts = {};

            data.forEach(account => {
                const typeName = account.accountType || 'Uncategorized';
                if (!groupedAccounts[typeName]) {
                    groupedAccounts[typeName] = [];
                }
                groupedAccounts[typeName].push(account);
            });

            selectElements.forEach(select => {
                select.innerHTML = '<option value="">Select Chart of Account</option>';
                for (const [typeName, accounts] of Object.entries(groupedAccounts)) {
                    let optgroup = document.createElement('optgroup');
                    optgroup.label = typeName;

                    accounts.sort((a, b) => a.name.localeCompare(b.name)).forEach(account => {
                        let option = document.createElement('option');
                        option.value = account.id;
                        option.textContent = `[${account.accountCode}] ${account.name}`;
                        optgroup.appendChild(option);
                    });
                    select.appendChild(optgroup);
                }
            });
            isDropdownPopulated = true;
        },
        error: function (xhr, status, error) {
            console.error('Error loading Head of Accounts:', error);
        }
    });
}

document.querySelector("#journalTable").addEventListener("input", function (event) {
    if (event.target.name === "Debit" || event.target.name === "Credit") {
        let row = event.target.closest("tr");
        let debitInput = row.querySelector("[name='Debit']");
        let creditInput = row.querySelector("[name='Credit']");

        if (event.target.name === "Debit" && debitInput.value !== "") {
            creditInput.value = "";
        } else if (event.target.name === "Credit" && creditInput.value !== "") {
            debitInput.value = "";
        }

        updateTotals();
    }
        });

function updateTotals() {
    let totalDebit = 0, totalCredit = 0;

    document.querySelectorAll("#journalTable tbody tr").forEach(row => {
        let debit = parseFloat(row.querySelector("[name='Debit']").value) || 0;
        let credit = parseFloat(row.querySelector("[name='Credit']").value) || 0;

        totalDebit += debit;
        totalCredit += credit;
    });

    document.querySelector("#journalTable tfoot tr:nth-child(2) td span").textContent = totalDebit.toFixed(2);
    document.querySelector("#journalTable tfoot tr:nth-child(3) td span").textContent = (totalDebit - totalCredit).toFixed(2);
}

document.getElementById("addNewRow").addEventListener("click", addNewJournalRow);

function addNewJournalRow() {
    let tableBody = document.querySelector("#journalTable tbody");
    let newRow = document.querySelector(".rowTemplate").cloneNode(true);

    newRow.querySelectorAll("input").forEach(input => input.value = "");
    tableBody.appendChild(newRow);
    loadHeadOfAccountDropdown();
    updateRemoveButtons();
}

document.querySelector("#journalTable").addEventListener("click", function (event) {
    if (event.target.classList.contains("removeRow")) {
        let rows = document.querySelectorAll("#journalTable tbody tr");
        if (rows.length > 2) {
            event.target.closest("tr").remove();
            updateTotals();
            updateRemoveButtons();
        }
    }
        });

document.getElementById("journalForm").addEventListener("submit", function (event) {
    if (document.querySelectorAll("#journalTable tbody tr").length < 2) {
        alert("You must have at least two rows in the table.");
        event.preventDefault();
    }
        });

        document.getElementById("journalForm").addEventListener("submit", function (event) {
            event.preventDefault(); // Prevent default form submission

            // Validate minimum rows
            let rows = document.querySelectorAll("#journalTable tbody tr");
            if (rows.length < 2) {
                alert("You must have at least two rows in the table.");
                return;
            }

            // Collect form data
            let journalData = {
                VchDate: document.getElementById("VchDate").value,
                RefNo: document.getElementById("RefNo").value,
                Notes: document.getElementById("Notes").value,
                VchType: parseInt(document.getElementById("JournalType").value),
                JournalPostDetails: []
            };

            // Collect table row data (JournalPostDetails)
            rows.forEach(row => {
                let headOfAccount = row.querySelector(".headOfAccountDropdown").value;
                let description = row.querySelector("[name='Description']").value;
                let debit = parseFloat(row.querySelector("[name='Debit']").value) || 0;
                let credit = parseFloat(row.querySelector("[name='Credit']").value) || 0;

                if (headOfAccount) { // Only add row if head of account is selected
                    journalData.JournalPostDetails.push({
                        ChartOfAccountId: parseInt(headOfAccount),
                        Description: description,
                        Debit: debit,
                        Credit: credit
                    });
                }
            });

            // Validate totals
            let totalDebit = journalData.JournalPostDetails.reduce((sum, detail) => sum + detail.Debit, 0);
            let totalCredit = journalData.JournalPostDetails.reduce((sum, detail) => sum + detail.Credit, 0);
            if (totalDebit !== totalCredit) {
                alert("Debit and Credit totals must match.");
                return;
            }

            // Send data to controller via AJAX
            $.ajax({
                url: '@Url.Action("CreateOrUpdateJournal", "Journal")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(journalData),
                success: function (response) {
                    if (response.success) {
                        alert("Journal saved successfully!");
                        window.location.href = '@Url.Action("JournalList", "Journal")';
                    } else {
                        alert("Error saving journal: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("Error saving journal: " + error);
                }
            });
        });
    </script>
}
