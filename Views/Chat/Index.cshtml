@model List<AccuStock.Models.User>
@{
    ViewBag.Title = "Chat";
}

<div class="row">
    <div class="col-md-12">
        <div class="card shadow">
            <div class="chat-container"></div>
            <div id="userList" class="user-list">
                <h3>Users</h3>
                <ul>
                    @foreach (var user in Model)
                    {
                        <li onclick="startChat('@user.Id', '@user.FullName')">@user.FullName (@user.Email)</li>
                    }
                </ul>
            </div>

            <div id="chatBox" class="chat-box" style="display:none;">
                <h4 id="chatWith"></h4>
                <div id="messages" class="message-container"></div>
                <div class="message-input">
                    <input type="text" id="messageInput" placeholder="Type message..." />
                    <button onclick="sendMessage()" class="btn btn-sm btn-primary">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .withAutomaticReconnect()
            .build();

        let receiverId = "";

        connection.on("ReceiveMessage", function (senderId, message) {
            const msgDiv = document.getElementById("messages");
            const isCurrentUser = senderId === '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';
            const messageClass = isCurrentUser ? 'message-self' : 'message-other';
            msgDiv.innerHTML += `<div class="${messageClass}"><b>${senderId}</b>: ${message}</div>`;
            msgDiv.scrollTop = msgDiv.scrollHeight;
        });

        async function startChat(id, username) {
            receiverId = id;
            document.getElementById("chatBox").style.display = "block";
            document.getElementById("chatWith").innerText = "Chat with " + username;
            document.getElementById("messages").innerHTML = '';

            // Load previous messages
            const response = await fetch(`/Chat/GetMessages?receiverId=${id}`);
            const messages = await response.json();
            messages.forEach(msg => {
                const isCurrentUser = msg.senderId === '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';
                const messageClass = isCurrentUser ? 'message-self' : 'message-other';
                document.getElementById("messages").innerHTML += `<div class="${messageClass}"><b>${msg.senderId}</b>: ${msg.message}</div>`;
            });
        }

        async function sendMessage() {
            const msgInput = document.getElementById("messageInput");
            const message = msgInput.value.trim();
            if (message && receiverId) {
                await connection.invoke("SendMessage", receiverId, message)
                    .catch(err => console.error(err));
                msgInput.value = '';
            }
        }

        document.getElementById("messageInput").addEventListener("keypress", async (e) => {
            if (e.key === "Enter") {
                await sendMessage();
            }
        });

        connection.start()
            .then(() => console.log("SignalR Connected"))
            .catch(err => console.error(err.toString()));
    </script>
    <style>
        .chat-container {
            display: flex;
            gap: 20px;
        }

        .user-list {
            width: 30%;
            max-height: 400px;
            overflow-y: auto;
        }

        .chat-box {
            width: 70%;
        }

        .message-container {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
        }

        .message-self {
            text-align: right;
            color: blue;
        }

        .message-other {
            text-align: left;
            color: black;
        }

        .message-input {
            margin-top: 10px;
        }

        .message-input input {
            width: 80%;
        }
    </style>
}